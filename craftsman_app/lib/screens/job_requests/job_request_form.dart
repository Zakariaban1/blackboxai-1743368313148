import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:craftsman_app/localization/app_localizations.dart';
import 'package:craftsman_app/models/job_model.dart';
import 'package:craftsman_app/models/user_model.dart';
import 'package:craftsman_app/services/job_repository.dart';
import 'package:craftsman_app/services/user_repository.dart';

class JobRequestForm extends ConsumerStatefulWidget {
  final AppUser craftsman;
  const JobRequestForm({super.key, required this.craftsman});

  @override
  ConsumerState<JobRequestForm> createState() => _JobRequestFormState();
}

class _JobRequestFormState extends ConsumerState<JobRequestForm> {
  final _formKey = GlobalKey<FormState>();
  final _messageController = TextEditingController();
  bool _isSubmitting = false;

  @override
  void dispose() {
    _messageController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final l10n = context.l10n;
    final currentUser = ref.watch(authStateProvider).value;

    return Scaffold(
      appBar: AppBar(title: Text(l10n.requests)),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              Text(
                'Request service from ${widget.craftsman.email}',
                style: Theme.of(context).textTheme.titleLarge,
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _messageController,
                decoration: InputDecoration(
                  labelText: 'Message (optional)',
                  border: const OutlineInputBorder(),
                ),
                maxLines: 4,
              ),
              const SizedBox(height: 24),
              ElevatedButton(
                onPressed: _isSubmitting || currentUser == null
                    ? null
                    : _submitRequest,
                child: _isSubmitting
                    ? const CircularProgressIndicator()
                    : const Text('Send Request'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Future<void> _submitRequest() async {
    if (_formKey.currentState!.validate()) {
      setState(() => _isSubmitting = true);
      
      try {
        final currentUser = ref.read(authStateProvider).value!;
        final repository = ref.read(jobRepositoryProvider);

        final request = JobRequest(
          id: '', // Will be generated by Firestore
          senderId: currentUser.uid,
          receiverId: widget.craftsman.uid,
          message: _messageController.text.trim(),
          status: 'pending',
          createdAt: DateTime.now(),
          craft: widget.craftsman.craft,
          location: widget.craftsman.location,
        );

        await repository.createJobRequest(request);
        Navigator.of(context).pop();
      } finally {
        setState(() => _isSubmitting = false);
      }
    }
  }
}